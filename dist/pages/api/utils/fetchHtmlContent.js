// fetchHtmlContent.ts
// Extract settings specifically for the Popup format
export function getPopupSettings(campaignData) {
    return campaignData.settingsPopupState
        ? JSON.parse(campaignData.settingsPopupState)
        : null;
}
// Extract settings specifically for the Topbar format
export function getTopbarSettings(campaignData) {
    return campaignData.settingsTopbarState
        ? JSON.parse(campaignData.settingsTopbarState)
        : null;
}
// Generate script content for Popup format
export function generatePopupScriptContent(campaignData, settings) {
    return "\n    (function() {\n      console.log(\"Script Loaded: Initializing Popup Campaign...\");\n\n      const campaignData = ".concat(JSON.stringify(campaignData), ";\n      const settings = ").concat(JSON.stringify(settings), ";\n      const compiledHtml = campaignData.compiledHtml ? JSON.parse(campaignData.compiledHtml) : {};\n\n      const createPopupElement = () => {\n        console.log(\"Creating Popup Element...\");\n\n        const popupElement = document.createElement('div');\n        popupElement.id = 'campaign';\n        popupElement.style.position = 'fixed';\n        popupElement.style.top = '50%';\n        popupElement.style.left = '50%';\n        popupElement.style.transform = 'translate(-50%, -50%)';\n        popupElement.style.width = settings.desktopStep1.width;\n        popupElement.style.height = settings.desktopStep1.height;\n        popupElement.style.backgroundColor = settings.desktopStep1.backgroundColor;\n        popupElement.style.boxShadow = '0 2px 10px rgba(0,0,0,0.2)';\n        popupElement.style.borderRadius = (parseInt(settings.desktopStep1.borderWidth) + 2) + 'px';\n        popupElement.style.zIndex = '9999';\n\n        const closeButton = document.createElement('button');\n        closeButton.innerHTML = '&times;';\n        closeButton.id = 'close-button';\n        closeButton.style.position = 'absolute';\n        closeButton.style.top = '10px';\n        closeButton.style.right = '10px';\n        closeButton.style.backgroundColor = 'transparent';\n        closeButton.style.border = 'none';\n        closeButton.style.fontSize = '24px';\n        closeButton.style.cursor = 'pointer';\n        closeButton.style.zIndex = '10000';\n\n        closeButton.addEventListener('click', () => {\n          console.log('Close button clicked');\n          popupElement.style.display = 'none';\n          const overlay = document.getElementById('overlay');\n          if (overlay) overlay.style.display = 'none';\n        });\n\n        popupElement.appendChild(closeButton);\n        document.body.appendChild(popupElement);\n\n        const isMobile = window.innerWidth <= 650;\n        const htmlContentStepOne = isMobile ? compiledHtml.mobileStepOne : compiledHtml.desktopStepOne;\n        const htmlContentStepTwo = isMobile ? compiledHtml.mobileStepTwo : compiledHtml.desktopStepTwo;\n\n        const stepOneWrapper = document.createElement('div');\n        stepOneWrapper.id = 'step-one-wrapper';\n        stepOneWrapper.innerHTML = htmlContentStepOne;\n        stepOneWrapper.style.display = 'block';\n        popupElement.appendChild(stepOneWrapper);\n\n        const stepTwoWrapper = document.createElement('div');\n        stepTwoWrapper.id = 'step-two-wrapper';\n        stepTwoWrapper.innerHTML = ''; // Initially empty to avoid showing placeholders\n        stepTwoWrapper.style.display = 'none';\n        popupElement.appendChild(stepTwoWrapper);\n\n        // Add spinner while loading\n        const spinner = document.createElement('div');\n        spinner.id = 'spinner';\n        spinner.innerHTML = `\n          <div class=\"spinner-container\">\n            <div class=\"spinner\">\n              <div class=\"spinner-text\">R</div>\n            </div>\n          </div>\n        `;\n        spinner.style.display = 'none'; // Hidden initially\n        stepTwoWrapper.appendChild(spinner);\n\n        // Spinner CSS Styles\n        const style = document.createElement('style');\n        style.innerHTML = `\n          .spinner-container {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100%;\n            width: 100%;\n          }\n          .spinner {\n            border: 4px solid rgba(0, 0, 0, 0.1);\n            border-top: 4px solid #47b775; /* Spinner color */\n            border-radius: 50%;\n            width: 40px;\n            height: 40px;\n            animation: spin 1s linear infinite;\n            position: relative;\n          }\n          .spinner-text {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            font-size: 16px;\n            font-weight: bold;\n            color: #47b775; /* Text color */\n          }\n          @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n          }\n        `;\n        document.head.appendChild(style);\n\n        const overlay = document.createElement('div');\n        overlay.id = 'overlay';\n        overlay.style.position = 'fixed';\n        overlay.style.top = '0';\n        overlay.style.left = '0';\n        overlay.style.width = '100%';\n        overlay.style.height = '100%';\n        overlay.style.backgroundColor = 'rgba(0,0,0,0.5)';\n        overlay.style.zIndex = '9998';\n        document.body.appendChild(overlay);\n\n        applyPopupSettings(1, isMobile);\n\n        const submitButton = stepOneWrapper.querySelector(\"#submit-button\");\n        if (submitButton) {\n          submitButton.addEventListener(\"click\", (event) => {\n            event.preventDefault();\n\n            // Hide step one and show spinner immediately\n            stepOneWrapper.style.display = 'none';\n            spinner.style.display = 'block';\n\n            const formData = {};\n\n            // Capture input data as the user types\n            const inputs = stepOneWrapper.querySelectorAll('input[name]');\n            inputs.forEach(input => {\n              const inputName = input.name;\n              formData[inputName] = input.value;\n            });\n\n            // Add metadata\n            formData.metadata = JSON.stringify({\n              origin: window.location.origin,\n              referrer: document.referrer,\n              timestamp: new Date().toISOString(),\n            });\n\n            // Add campaign-specific data to formData\n            formData.campaign_uuid = campaignData.campaign_uuid;\n            formData.company_id = campaignData.company_id;\n\n            console.log('Form submitted with data:', formData);\n\n            const xhr = new XMLHttpRequest();\n            xhr.open('POST', 'https://0fe0-2a0c-5a81-506-d900-10c5-f3f3-cedc-84fe.ngrok-free.app/api/submit-form', true);\n            xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\n            xhr.onreadystatechange = function() {\n              if (xhr.readyState === 4 && xhr.status === 200) {\n                const response = JSON.parse(xhr.responseText);\n                if (response.success && response.generatedUrl) {\n                  console.log('Generated URL:', response.generatedUrl);\n\n                  const maxUrlLength = 15;\n                  const truncatedUrl = response.generatedUrl.length > maxUrlLength\n                    ? response.generatedUrl.slice(0, maxUrlLength) + '...'\n                    : response.generatedUrl;\n\n                  // Update stepTwoWrapper's content dynamically\n                  stepTwoWrapper.innerHTML = htmlContentStepTwo;  // Insert the actual HTML once we have the correct URL\n\n                  const urlDisplayDiv = stepTwoWrapper.querySelector('#domain');\n                  if (urlDisplayDiv) {\n                    urlDisplayDiv.textContent = truncatedUrl;\n                  }\n\n                  const copyButton = stepTwoWrapper.querySelector('#copy-button button');\n                  if (copyButton) {\n                    copyButton.addEventListener('click', () => {\n                      navigator.clipboard.writeText(response.generatedUrl).then(() => {\n                        copyButton.textContent = 'Copied!';\n                        setTimeout(() => {\n                          copyButton.textContent = 'Copy';\n                        }, 3000);\n                      }).catch(err => {\n                        console.error('Failed to copy URL: ', err);\n                      });\n                    });\n                  }\n\n                  // Social Media Sharing\n                  document.getElementById('whatsapp').addEventListener('click', () => {\n                    const shareUrl = `https://wa.me/?text=${encodeURIComponent(response.generatedUrl)}`;\n                    window.open(shareUrl, '_blank');\n                  });\n\n                  document.getElementById('email').addEventListener('click', () => {\n                    const shareUrl = `mailto:?subject=Check this out&body=${encodeURIComponent(response.generatedUrl)}`;\n                    window.open(shareUrl, '_blank');\n                  });\n\n                  document.getElementById('facebook').addEventListener('click', () => {\n                    const shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(response.generatedUrl)}`;\n                    window.open(shareUrl, '_blank');\n                  });\n\n                  document.getElementById('messenger').addEventListener('click', () => {\n                    const shareUrl = `fb-messenger://share?link=${encodeURIComponent(response.generatedUrl)}`;\n                    window.open(shareUrl, '_blank');\n                  });\n\n                  document.getElementById('sms').addEventListener('click', () => {\n                    const shareUrl = `sms:?&body=${encodeURIComponent(response.generatedUrl)}`;\n                    window.open(shareUrl, '_blank');\n                  });\n\n                  document.getElementById('x').addEventListener('click', () => {\n                    const shareUrl = `https://twitter.com/intent/tweet?url=${encodeURIComponent(response.generatedUrl)}`;\n                    window.open(shareUrl, '_blank');\n                  });\n\n                  document.getElementById('reddit').addEventListener('click', () => {\n                    const shareUrl = `https://www.reddit.com/submit?url=${encodeURIComponent(response.generatedUrl)}`;\n                    window.open(shareUrl, '_blank');\n                  });\n\n                  document.getElementById('linkedin').addEventListener('click', () => {\n                    const shareUrl = `https://www.linkedin.com/shareArticle?mini=true&url=${encodeURIComponent(response.generatedUrl)}`;\n                    window.open(shareUrl, '_blank');\n                  });\n\n                  // Hide spinner and show content\n                  spinner.style.display = 'none';  // Hide spinner after loading is complete\n                  stepTwoWrapper.style.display = 'block';  // Display the actual content\n\n                  // Transition to Step Two\n                  goToPopupStep2(stepOneWrapper, stepTwoWrapper);\n                }\n              }\n            };\n            xhr.send(JSON.stringify(formData));\n          });\n        }\n      };\n\n      const applyPopupSettings = (step, isMobile) => {\n        console.log(`Applying Popup settings for step ${step}...`);\n        let settingsStep;\n\n        settingsStep = isMobile ? (step === 1 ? settings.mobileStep1 : settings.mobileStep2) : (step === 1 ? settings.desktopStep1 : settings.desktopStep2);\n        console.log('Popup Settings:', settingsStep);\n\n        const popupElement = document.getElementById('campaign');\n        if (popupElement && settingsStep) {\n          popupElement.style.backgroundColor = settingsStep.backgroundColor;\n          popupElement.style.width = settingsStep.width;\n          popupElement.style.height = settingsStep.height;\n          popupElement.style.borderRadius = (parseInt(settingsStep.borderWidth) + 2) + 'px';\n        }\n      };\n\n      const goToPopupStep2 = (stepOneWrapper, stepTwoWrapper) => {\n        console.log(\"Transitioning to Popup Step Two...\");\n\n        stepOneWrapper.style.display = \"none\";\n        stepTwoWrapper.style.display = \"block\";\n\n        const isMobile = window.innerWidth <= 650;\n        applyPopupSettings(2, isMobile);\n      };\n\n      // Initialize the Popup\n      createPopupElement();\n\n      // Handle window resize events\n      window.addEventListener('resize', function() {\n        const currentStep = document.querySelector(\"#step-two-wrapper\")?.style.display === \"block\" ? 2 : 1;\n        const isMobile = window.innerWidth <= 650;\n        applyPopupSettings(currentStep, isMobile);\n      });\n\n      // Handle postMessage events for Popup\n      window.addEventListener('message', function(event) {\n        console.log(\"Popup Received message:\", event.data);\n        if (event.data === 'goToStep2') {\n          const stepOneWrapper = document.getElementById('step-one-wrapper');\n          const stepTwoWrapper = document.getElementById('step-two-wrapper');\n          const isMobile = window.innerWidth <= 650;\n          goToPopupStep2(stepOneWrapper, stepTwoWrapper);\n        }\n      });\n\n    })();\n  ");
}
export function generateTopbarScriptContent(campaignData, settings) {
    return "\n    (function() {\n      console.log(\"Script Loaded: Initializing Topbar Campaign...\");\n\n      const campaignData = ".concat(JSON.stringify(campaignData), ";\n      const settings = ").concat(JSON.stringify(settings), ";\n      const compiledHtml = campaignData.compiledHtml ? JSON.parse(campaignData.compiledHtml) : {};\n\n      const createTopbarElement = () => {\n        console.log(\"Creating Topbar Element...\");\n\n        const topbarElement = document.createElement('div');\n        topbarElement.id = 'campaign';\n        topbarElement.style.position = 'fixed';\n        topbarElement.style.top = '0';\n        topbarElement.style.left = '0';\n        topbarElement.style.width = '100%';\n        topbarElement.style.height = settings.desktopStep1.height;\n        topbarElement.style.backgroundColor = settings.desktopStep1.backgroundColor;\n        topbarElement.style.zIndex = '9999';\n\n        const closeButton = document.createElement('button');\n        closeButton.innerHTML = '&times;';\n        closeButton.id = 'close-button';\n        closeButton.style.position = 'absolute';\n        closeButton.style.top = '10px';\n        closeButton.style.right = '10px';\n        closeButton.style.backgroundColor = 'transparent';\n        closeButton.style.border = 'none';\n        closeButton.style.fontSize = '24px';\n        closeButton.style.cursor = 'pointer';\n        closeButton.style.zIndex = '10000';\n\n        closeButton.addEventListener('click', () => {\n          console.log('Close button clicked');\n          topbarElement.style.display = 'none';\n          document.body.style.marginTop = '0';\n        });\n\n        topbarElement.appendChild(closeButton);\n        document.body.appendChild(topbarElement);\n\n        document.body.style.marginTop = settings.desktopStep1.height;\n\n        const isMobile = window.innerWidth <= 650;\n        const htmlContentStepOne = isMobile ? compiledHtml.mobileStepOne : compiledHtml.desktopStepOne;\n        const htmlContentStepTwo = isMobile ? compiledHtml.mobileStepTwo : compiledHtml.desktopStepTwo;\n\n        const stepOneWrapper = document.createElement('div');\n        stepOneWrapper.id = 'step-one-wrapper';\n        stepOneWrapper.innerHTML = htmlContentStepOne;\n        stepOneWrapper.style.display = 'block';\n        topbarElement.appendChild(stepOneWrapper);\n\n        const stepTwoWrapper = document.createElement('div');\n        stepTwoWrapper.id = 'step-two-wrapper';\n        stepTwoWrapper.innerHTML = '';  // Initially keep it empty to avoid showing placeholders\n        stepTwoWrapper.style.display = 'none';\n        stepTwoWrapper.style.position = 'relative';\n        topbarElement.appendChild(stepTwoWrapper);\n\n        // Add spinner while loading\n        const spinner = document.createElement('div');\n        spinner.id = 'spinner';\n        spinner.innerHTML = `\n          <div class=\"spinner-container\">\n            <div class=\"spinner\">\n              <div class=\"spinner-text\">R</div>\n            </div>\n          </div>\n        `;\n        spinner.style.display = 'block';  // Show spinner initially\n        stepTwoWrapper.appendChild(spinner);\n\n        // Spinner CSS Styles\n        const style = document.createElement('style');\n        style.innerHTML = `\n          .spinner-container {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100%;\n            width: 100%;\n          }\n          .spinner {\n            border: 4px solid rgba(0, 0, 0, 0.1);\n            border-top: 4px solid #47b775; /* Spinner color */\n            border-radius: 50%;\n            width: 40px;\n            height: 40px;\n            animation: spin 1s linear infinite;\n            position: relative;\n          }\n          .spinner-text {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            font-size: 16px;\n            font-weight: bold;\n            color: #47b775; /* Text color */\n          }\n          @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n          }\n        `;\n        document.head.appendChild(style);\n\n        applyTopbarSettings(1, isMobile);\n        setupTopbarEventListeners(stepOneWrapper, stepTwoWrapper);\n\n        // Initialize formData object\n        const formData = {};\n\n        // Add event listeners to input elements\n        const inputContainers = stepOneWrapper.querySelectorAll('.input-container');\n        const inputs = stepOneWrapper.querySelectorAll('input[name]');\n        let expandedId = null;\n\n        inputs.forEach(input => {\n          const inputName = input.name;\n\n          input.addEventListener('input', () => {\n            console.log(`${inputName} typing: `, input.value);\n            formData[inputName] = input.value;\n            console.log('Current formData:', formData);\n          });\n        });\n\n        if (isMobile) {\n          inputContainers.forEach((container, index) => {\n            const input = container.querySelector('input');\n            const iconContainer = container.querySelector('.icon-container');\n            const identifier = input ? input.placeholder : `Input container ${index + 1}`;\n\n            if (input) {\n              container.addEventListener('click', () => {\n                if (expandedId !== index) {\n                  if (expandedId !== null) {\n                    const previousContainer = inputContainers[expandedId];\n                    const previousInput = previousContainer.querySelector('input');\n                    const previousIconContainer = previousContainer.querySelector('.icon-container');\n\n                    if (previousInput && previousContainer && previousIconContainer) {\n                      previousInput.style.display = 'none';\n                      previousContainer.style.width = '38px';\n                      previousContainer.style.border = '1px solid';\n                      previousContainer.style.padding = '10px';\n                      previousIconContainer.style.display = 'block';\n                    }\n                  }\n\n                  if (input && container && iconContainer) {\n                    input.style.display = 'block';\n                    container.style.width = '120px';\n                    container.style.border = 'none';\n                    container.style.padding = '0';\n                    iconContainer.style.display = 'none';\n                  }\n                  expandedId = index;\n\n                  console.log(`${identifier} clicked`);\n                }\n              });\n            }\n          });\n        }\n\n        const submitButton = stepOneWrapper.querySelector('#submit-button');\n        submitButton.addEventListener('click', (event) => {\n          event.preventDefault();\n\n          // Extract URL parameters and referral UUID if it exists\n          const urlParams = new URLSearchParams(window.location.search);\n          const firstKey = urlParams.keys().next().value;\n\n          let referralUuid = null;\n          if (firstKey) {\n            referralUuid = firstKey.split('?')[0]; // Only split if firstKey exists\n          }\n\n          formData.referred_by = referralUuid || null;\n\n          // Add metadata\n          formData.metadata = JSON.stringify({\n            origin: window.location.origin,\n            referrer: document.referrer,\n            timestamp: new Date().toISOString(),\n          });\n\n          formData.campaign_uuid = campaignData.campaign_uuid;\n          formData.company_id = campaignData.company_id;\n\n          console.log('Form submitted with data:', formData);\n\n          const xhr = new XMLHttpRequest();\n          xhr.open('POST', 'https://0fe0-2a0c-5a81-506-d900-10c5-f3f3-cedc-84fe.ngrok-free.app/api/submit-form', true);\n          xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\n          xhr.onreadystatechange = function() {\n            if (xhr.readyState === 4 && xhr.status === 200) {\n              const response = JSON.parse(xhr.responseText);\n              if (response.success && response.generatedUrl) {\n                console.log('Generated URL:', response.generatedUrl);\n\n                const maxUrlLength = 15;\n                const truncatedUrl = response.generatedUrl.length > maxUrlLength\n                  ? response.generatedUrl.slice(0, maxUrlLength) + '...'\n                  : response.generatedUrl;\n\n                // Update stepTwoWrapper's content dynamically\n                stepTwoWrapper.innerHTML = htmlContentStepTwo;  // Insert the actual HTML once we have the correct URL\n\n                const urlDisplayDiv = stepTwoWrapper.querySelector('#domain');\n                if (urlDisplayDiv) {\n                  urlDisplayDiv.textContent = truncatedUrl;\n                }\n\n                const copyButton = stepTwoWrapper.querySelector('#copy-button button');\n                if (copyButton) {\n                  copyButton.addEventListener('click', () => {\n                    navigator.clipboard.writeText(response.generatedUrl).then(() => {\n                      copyButton.textContent = 'Copied!';\n                      setTimeout(() => {\n                        copyButton.textContent = 'Copy';\n                      }, 3000);\n                    }).catch(err => {\n                      console.error('Failed to copy URL: ', err);\n                    });\n                  });\n                }\n\n                // Social Media Sharing\n                document.getElementById('whatsapp').addEventListener('click', () => {\n                  const shareUrl = `https://wa.me/?text=${encodeURIComponent(response.generatedUrl)}`;\n                  window.open(shareUrl, '_blank');\n                });\n\n                document.getElementById('email').addEventListener('click', () => {\n                  const shareUrl = `mailto:?subject=Check this out&body=${encodeURIComponent(response.generatedUrl)}`;\n                  window.open(shareUrl, '_blank');\n                });\n\n                document.getElementById('facebook').addEventListener('click', () => {\n                  const shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(response.generatedUrl)}`;\n                  window.open(shareUrl, '_blank');\n                });\n\n                document.getElementById('messenger').addEventListener('click', () => {\n                  const shareUrl = `fb-messenger://share?link=${encodeURIComponent(response.generatedUrl)}`;\n                  window.open(shareUrl, '_blank');\n                });\n\n                document.getElementById('sms').addEventListener('click', () => {\n                  const shareUrl = `sms:?&body=${encodeURIComponent(response.generatedUrl)}`;\n                  window.open(shareUrl, '_blank');\n                });\n\n                document.getElementById('x').addEventListener('click', () => {\n                  const shareUrl = `https://twitter.com/intent/tweet?url=${encodeURIComponent(response.generatedUrl)}`;\n                  window.open(shareUrl, '_blank');\n                });\n\n                document.getElementById('reddit').addEventListener('click', () => {\n                  const shareUrl = `https://www.reddit.com/submit?url=${encodeURIComponent(response.generatedUrl)}`;\n                  window.open(shareUrl, '_blank');\n                });\n\n                document.getElementById('linkedin').addEventListener('click', () => {\n                  const shareUrl = `https://www.linkedin.com/shareArticle?mini=true&url=${encodeURIComponent(response.generatedUrl)}`;\n                  window.open(shareUrl, '_blank');\n                });\n\n                // Hide spinner and show content\n                spinner.style.display = 'none';  // Hide spinner after loading is complete\n                stepTwoWrapper.style.display = 'block';  // Display the actual content\n\n                // Now that the URL and content are ready, transition to Step Two\n                goToTopbarStep2(stepOneWrapper, stepTwoWrapper);\n              }\n            }\n          };\n          xhr.send(JSON.stringify(formData));\n        });\n\n      };\n\n      const applyTopbarSettings = (step, isMobile) => {\n        console.log(`Applying Topbar settings for step ${step}...`);\n        let settingsStep;\n\n        settingsStep = isMobile ? (step === 1 ? settings.mobileStep1 : settings.mobileStep2) : (step === 1 ? settings.desktopStep1 : settings.desktopStep2);\n        console.log('Topbar Settings:', settingsStep);\n\n        const topbarElement = document.getElementById('campaign');\n        if (topbarElement && settingsStep) {\n          topbarElement.style.backgroundColor = settingsStep.backgroundColor;\n          topbarElement.style.height = settingsStep.height;\n          document.body.style.marginTop = settingsStep.height;\n        }\n      };\n\n      const setupTopbarEventListeners = (stepOneWrapper, stepTwoWrapper) => {\n        console.log(\"Setting up Topbar event listeners...\");\n\n        const submitButton = stepOneWrapper.querySelector(\"#submit-button\");\n        console.log(\"Topbar Submit button:\", submitButton);\n        if (submitButton) {\n          submitButton.addEventListener(\"click\", (event) => {\n            console.log(\"Topbar Submit button clicked\");\n            event.preventDefault();\n            goToTopbarStep2(stepOneWrapper, stepTwoWrapper);\n          });\n        }\n      };\n\n      const goToTopbarStep2 = (stepOneWrapper, stepTwoWrapper) => {\n        console.log(\"Transitioning to Topbar Step Two...\");\n\n        stepOneWrapper.style.display = \"none\";\n        stepTwoWrapper.style.display = \"block\";\n\n        const isMobile = window.innerWidth <= 650;\n        applyTopbarSettings(2, isMobile);\n      };\n\n      // Initialize the Topbar\n      createTopbarElement();\n\n      // Handle window resize events\n      window.addEventListener('resize', function() {\n        const currentStep = document.querySelector(\"#step-two-wrapper\")?.style.display === \"block\" ? 2 : 1;\n        const isMobile = window.innerWidth <= 650;\n        applyTopbarSettings(currentStep, isMobile);\n      });\n\n      // Handle postMessage events for Topbar\n      window.addEventListener('message', function(event) {\n        console.log(\"Topbar Received message:\", event.data);\n        if (event.data === 'goToStep2') {\n          const stepOneWrapper = document.getElementById('step-one-wrapper');\n          const stepTwoWrapper = document.getElementById('step-two-wrapper');\n          const isMobile = window.innerWidth <= 650;\n          goToTopbarStep2(stepOneWrapper, stepTwoWrapper);\n        }\n      });\n\n    })();\n  ");
}
